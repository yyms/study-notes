

Sed 学习笔记

sed和awk反正我目前没有发现大规模的应用到它，倒是很多情况是跟bash脚本里面混用到一点点．比如我查询到某几条记录，而我需要提取记录中的某列或者某几列的这种情况，这时候用sed或者awk进行提取切割甚至简单的编辑都是很方便的．

格式：sed -opts 'command' filename(s)
或者管道输入 ... | sed -opts 'command'

选项
-n 取消默认打印．默认情况下会全文打印，同时重复匹配的打印．而这个选项就只打印匹配的记录
-e 多个command可以用这个连接，比如 sed -n -e 'cmd1' -e 'cmd2' files
-i 使得sed的编辑保存．默认的sed操作没有破坏性，不会对原文件做修改的，但是如果确实要编辑的话，可以加上这个参数

这里实验呢，还是使用<UNIX shell by example>里面的datafile文件了．
[bash][nicol@dream llee]$ cat datafile 
northwest       NW      Charles Main            3.0     .98     3       34
western         WE      Sharon Gray             5.3     .97     5       23
southwest       SW      Lewis Dalsass           2.7     .8      2       18
southern        SO      Suan Chin               5.1     .95     4       15
southeast       SE      Patricia Hemenway       4.0     .7      4       17
eastern         EA      TB Savage               4.4     .84     5       20
northeast       NE      AM Main Jr.             5.1     .94     3       13
north           NO      Margot Weber            4.5     .89     5        9
central         CT      Ann Stephens            5.7     .94     5       13
[nicol@dream llee]$ [/bash]

命令
1.删除 d
a) [bash][nicol@dream llee]$ sed '3d' datafile[/bash]
删除第3行，其余行打印到屏幕上．sed对文件是没有破坏性的，这里原文件datafile还是没有改变哦
b) [bash][nicol@dream llee]$ sed '3,$d' datafile[/bash]
删除第3行到文件的末尾记录．只打印剩余的第1.2两行-->,是范围操作符，而$代表文件或者记录的最后一行
c) [bash][nicol@dream llee]$ sed '$d' datafile [/bash]
删除最后一行
d) [bash][nicol@dream llee]$ sed '/north/d' datafile[/bash]
删除匹配north的行，其余行都被打印

2.替换 s　g标志表示是对行内的所有匹配都进行替换
a) [bash][nicol@dream llee]$ sed -n 's/^west/north/p' datafile[/bash]
替换所有west打头的行.这里用了-n和p选项和命令，表示只打印替换的行记录
b) [bash][nicol@dream llee]$ sed 's/[0-9][0-9]$/&.5/' datafile[/bash]
这里的$表示行的末尾．&符号在替换中用于表示前面匹配到的内容．这样就是表示行结尾为2位数的内容，添加.5成为xx.5．如果要用&的字面意思，需要使用\&转意
[bash][nicol@dream llee]$ sed -n 's/[0-9][0-9]$/&.5\&/p' datafile
[nicol@dream llee]$sed -n 's/Sharon/Jones/gp' datafile[/bash]
c) 标记符号\(\)，可以复用前面的内容
[bash][nicol@dream llee]$ sed -n 's/\(Mar\)got/\1ianne/p' datafile[/bash]
这里，\1就复用了前面标记的Mar
d)　默认的替换分隔符是/，其实sed可以用任何的分隔符，就是紧跟着s的那个符号．可以用别的符号，对于操作日期啊，路径什么的很有效哦
[bash][nicol@dream llee]$ pwd | sed 's#nicol/dist#ztao#g'
/home/ztao/llee
[nicol@dream llee]$ [/bash]

3.行范围 ,
注意行范围是闭合的，就是包含匹配开始的行，匹配结束的行，已经两者之间的行: 5,10  /Dick/,/Joe/  /north/,$
[bash][nicol@dream llee]$ sed -n '/west/,/east/s/$/**TTT**/p' datafile[/bash]
这里将从west匹配行，到第一个east匹配行结束，将结尾替换成**TTT**
如果出现了west，但是没有出现east，就默认匹配到文件结尾的地方
[bash][nicol@dream llee]$ sed -n '/west/,/XXXX/s/$/**TTT**/p' datafile[/bash]
这个就替换west到文件结尾为止
[bash][nicol@dream llee]$ sed -n '/west/,$s/$/**TTT**/p' datafile[/bash]

4.多次编辑 -e
[bash][nicol@dream llee]$ sed -e '1,3d' -e 's/north/NORTH/' datafile [/bash]
注意的是，这两重编辑，是逐进行两项编辑，所以注意执行的顺序可能会有影响
[bash][nicol@dream llee]$ sed -n -e 's/thw/THW/p' -e 's/west/WEST/p' datafile         
norTHWest       NW      Charles Main            3.0     .98     3       34
WESTern         WE      Sharon Gray             5.3     .97     5       23
souTHWest       SW      Lewis Dalsass           2.7     .8      2       18
[nicol@dream llee]$ sed -n -e 's/west/WEST/p' -e 's/thw/THW/p' datafile         
northWEST       NW      Charles Main            3.0     .98     3       34
WESTern         WE      Sharon Gray             5.3     .97     5       23
southWEST       SW      Lewis Dalsass           2.7     .8      2       18
[nicol@dream llee]$ [/bash]

5.文件操作
1) 读文件 r
将一个文件的内容加到当前的位置上实际就是在所有匹配行的下面插入文件内容
[bash][nicol@dream llee]$ sed '/Charles/r newfile' datafile                          
northwest       NW      Charles Main            3.0     .98     3       34
----NICOL TAO---
western         WE      Sharon Gray             5.3     .97     5       23[/bash]
2)　写文件 w
把所有匹配的行记录写入到文件中
[bash][nicol@dream llee]$ sed '/south/w newfile1' datafile  [/bash]
3) 追加文本 a
a 命令后面是直接追加的文本内容
[bash][nicol@dream llee]$ sed '/south/a This is the message' datafile [/bash]
4)　插入文本 i
跟上面的a一样，只是这个是插在匹配行的前面
[bash][nicol@dream llee]$ sed '/north/i This is the message' datafile                
This is the message
northwest       NW      Charles Main            3.0     .98     3       34
western         WE      Sharon Gray             5.3     .97     5	23[/bash]
5) 替换文本 c
[bash][nicol@dream llee]$ sed '/north/c This is the message' datafile                
This is the message
western         WE      Sharon Gray             5.3     .97     5	23[/bash]
6) 下一行 n
[bash][nicol@dream llee]$ sed '/northwest/{n; s/^\<[a-z]*/XXTTZZF/; }' datafile     
northwest       NW      Charles Main            3.0     .98     3       34
XXTTZZF         WE      Sharon Gray             5.3     .97     5       23[/bash]
7) 替换，转换 y
[bash][nicol@dream llee]$ sed '1,2y/abcdefghigklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTU
VWXYZ/' datafile                                                             
NORTHWEST       NW      CHARLES MAIN            3.0     .98     3       34
WESTERN         WE      SHARON GRAY             5.3     .97     5       23[/bash]
8) 退出，不做处理
[bash][nicol@dream llee]$ sed '5q' datafile 
[nicol@dream llee]$ sed '/north/{ s/north/NORTH/; q; }' datafile   [/bash]

6.sed正则表达式的元字符
^		行首定位符
$		行尾定位符
.		匹配除换行之外的单个字符
*		匹配0个或者多个前导字符(这里是前导字符0或者多个，任意一个或多个字符，使用 .* )
[]	        指定字符中的任意一个字符，比如[Ll] [a-z]
[^]		上面一样，不匹配的字符
\(..\)	        保存匹配的字符，后面使用\1 \2..来引用，最多使用9个标签
&		保存查找匹配到的串，可以用在后面的替换中 s/love/**&**/
\<		词首定位符，单词的开头
\>		词尾定位符
x\{m\}	        连续m个
x\{m,\}　       至少m个
x\{m,n\}　      m-n个,sed -n 's/[0-9]\{2\}$/&.5/p' datafile

