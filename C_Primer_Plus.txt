>1.占位符使用%o和%x表示八进制和十六进制的数据，在结果输出的时候如果需要打印出0 0x前缀，就需要使用%#o和%#x以及%#X
对于打印和显示unsigned int, long, unsigned long，可以分别使用的格式化字符串的类型是：%u, %ld, %lu
%%打印一个%, %p打印指针
printf的其它修饰符号：
	- 项目左对齐，比如%-20s, %-20f
	+ 对于字符串，同没有加符号的结果相同（默认是右对齐，左边填补空白字符）；对于数字，需要添加正负符号
	# 显示八进制、十六进制的前导符号 %#o %#X
	0 对于数字，替换默认的空格前导符号，使用0来填充
	位数.小数点精度  默认小数点后是6位精度
有符号的和无符号的整数，如果数据小于有符号整数的最大值（正数），那么有符号与无符号的整数，它们的存储方式和打印的结果是相同的
浮点类型的打印，使用%f, %Lf,如果想用科学计数法，可以使用%e %E
>2.变量的定义和声明
定义：指定变量类型，并且为变量分配存储空间，同时还可以为变量指定初始化值；
声明：用于向程序表明变量的类型和名字，而不会分配存储空间；
所以，程序中变量可以声明多次，但是只能被定义一次。extern关键字常用于引用性声明，但是如果后面带上了初始化式，那么也就自动成了定义性声明了。但是正规的用法还是：extern用于引用性声明，后面不要添加初始化式，虽然可以警告编译通过。
>3.C语言的printf()函数是行缓冲的，标准C语言规定以下集中情况会刷新缓冲：缓冲区满了、遇到换行符\n、需要输入的时候scanf。所以有时候调试的时候会显示不到信息，\n总是好的，这不仅仅是为了美观。另外的一种方式就是调用fflush函数来强制刷新流的缓冲
>4.sizeof返回的类型是size_t，建议使用这种类型确保一致性
>5.scanf读取函数
	输入字段分隔符：空格 制表符 换行符
		这里有个特例，就是如果输入格式化使用的是%c读取字符，那么接下来的分割字符会被读取进来
		对于scanf，如果输入的内容不能被格式化，那么函数还是会讲读取的东西放回到输入缓冲中，等待下一个scanf的%格式化来尝试进行匹配。比如你需要一个%d，但是输入个'A'，那么这个字符会被保留，%d格式化失败。极端的，如果格式化中只有%d，那么就永远也不会跳过那个'A'了。
		还有个特殊的，就是"%c"和" c"，如果前面没有空格，那么任何一个字符（包括空白字符），都会被读取；如果有空格，那么将会跳过前面的任意多个空白字符（如果有的话），然后读取保存截下来的非空白字符
		*字符，对于printf函数，可以占用一个参数，表示格式化的字符的字段长度，比如:printf("The words:%*s",10,"hello");
		 对于scanf函数，*的使用可以跳过那个修饰的格式化符号，比如：scanf("%*d %d %*d",&num);如果输入 12 23 34，那么23会保存到num变量当中
>6.除法中，两个参数都是整数的时候，最终的结果是：正数，直接丢弃小数部分；负数，也是直接丢弃小数部分，相当于向0取整
	而对于取模操作中，取模的结果的符号是根据第一个操作数的符号来确定的，比如a%b，那么符号跟a一致。
		实际的计算结果是a%b == a-(a/b)*b  -11%5=-11-(-11/5)*5=-11-(-2*5)=-1
>7.自增自减运算符，一般来说++a比a++效率要高一些，后者需要保护副本。虽然现在的编译器会优化这类操作，但是对于C++自定义类型，性能差异还是比较大的，养成++a的习惯吧
   自增自减的具有很高的优先级，只有圆括号比它高，比如x*y++代表(x)*(y++)而不是(x*y)++
   但是，自增运算符不能被乱用，遵循以下原则：(a)如果一个变量在函数的参数中出现多次，不要将自增自减运算符带入；(b)在一个表达式中，某个变量多次出现，不要引入自增自减运算符。
>8.C语言中的关键概念：顺序点
	在C语言中，表达式都可以求值，而对变量赋值其实是表达式的副作用，所以求值才是C语言的关键任务。在这里，就有个顺序点：在改点处，所有的副作用都在进入下一步前被计算。C语言的分号就标志着一个顺序点，所以分号代表的语句中，赋值运算、增量减量运算所做的全部改变都必须在程序进入下一个语句前发生；同时任何一个完整的表达式（这个表达式不是一个更大表达式的子表达式）的结束也是一个顺序点，比如while的条件判断表达式。
>9.类型自动转换
	a)出现在表达式中时候，signed/unsigned的char, short会被自动提升到int; float会被提升到double
	b)在包含两种数据类型的任何运算中，两个值都会被转换成两种类型中类型较高的那个
	c)类型排序int < unsigned int < long < unsigned long < long long < unsigned long long < float < double < long double
	d)当数作为函数的参数被传递的时候，char和short会被转换为int，float会被转换成double XXXXX(原型阻止提升)
>10.C语言的逻辑运算符具有分界点的特效，在进入&&或者||操作时候，所有的副作用都会生效，且具有短路求解的特性，一点发	现某个元素使得整个表达式总体无效，或者后续语句对整个表达式的值没有影响了，求值就会立即停止。
>11._Bool 这个是C语言的数据类型，它的值只可能是0,1代表假和真；如果把人一个非0数据赋值给这个变量，都会被转换成1
	然后在stdbool.h这个头文件中，给出了更好的形式：bool true false
	传统上C语言喜欢使用int来作为标志，但是现在觉得使用bool作为标志就更加的确切了
>12.在进行输入字符的分类和判断的时候，比如是否是字符、数字。不必一定使用ascii判断，可以调用<ctype.h>中的函数来判断：isalpha() isdigit()；而且这种函数调用的方法是考虑到了其他非ascii编码的移植性的问题的
>13.C语言的缓冲分为无缓冲(比如stderr)、完全缓冲或者块缓冲I/O(通常用于文件IO，缓冲区填满后会被发送清空)和行缓冲I/O(通常用于键盘输入，在需要从终端流读取数据，或者需要输出回车时候，就可以清空缓冲区)，ANSI C的setbuf()和setvbuf()可以控制缓冲类型。
>14.输入可以使用getchar()和scanf()，前者用于字符输入，可以读取空格、制表符和换行符；scanf()格式化时，会自动跳过空格、制表符和换行符。
	getchar()有一个int型的返回值，当程序调用getchar()时，程序就等着用户按键，用户输入的字符被存放在键盘缓冲区中，直到用户按回车为止(回车字符也放在缓冲区中)。当用户键入回车之后，getchar()才开始从stdio流中每次读入一个字符，getchar()函数的返回值是用户输入的第一个字符的ASCII码，如出错返回-1，且将用户输入的字符回显到屏幕。如用户在按回车之前输入了不止一个字符，其他字符会保留在键盘缓存区中，等待后续getchar()调用读取。
	getch()与getchar()基本功能相同，差别是只要用户按一个键，getch()就立刻返回，getch()返回值是用户输入的ASCII码，出错返回-1，输入的字符不会回显在屏幕上。
	getch()包含在<conio.h>中，很多时候都是等待用户输入press any key to continue的实现
>15.XXXXXX 多个scanf连续调用
这里会出现的一个问题是 scanf()和getchar()的混合调用，scanf()会跳过换行符，但是会把换行符留在输入缓冲区中，如果scanf()直接紧接着调用getchar()的话，就会读入scanf()留下的换行符了；这时候还是使用while( getchar() != '\n' )	continue;来把空字符读取丢弃掉
	这些输入函数在读取文件结尾时候，都会返回EOF，所以在不断读取文件到结尾的方式是 int ch; while( (ch = getchar()) != EOF ) ...;另外，在Linux的命令行中，我们可以使用Ctrl-D来模拟EOF结尾标志
	对于某些交互式的程序，可能只需输入的开头的字符，而将接下来的字符给丢弃掉，可以这样：
	while( getchar() != '\n' )
		continue; /*skip them*/ 这个对于清除输入缓冲区，是十分重要的
>16.一个递归的例子
long rfact (int n) {
	long ans;
	if ( n > 0 )
		ans = n * rfact(n-1);
	else
		ans = 1;
	return ans;
}
void to_binary (unsigned long n) {
	int r = n % 2;
	if ( n >= 2 )
		to_binary(n/2);
	putchar('0'+ r);  // putchar(r ? '1' : '0')
}
>15.C99对于数组初始化，可以有指定元素的初始化，比如 int arr[6] = {1,2,[4]=212,12}; 其它没有指明的元素就是默认的值0，当然完全没有初始化任何元素的数组，那么如果是自动变量，数组内容就是随机值。数组定义时候采能用{}进行初始化，而后面就不能用{}进行整体初始化了。
	另外，对于C99，支持了VLA变长数组，数组的维度可以是变量：int ch = 20; int arr[ch]; arr[1] = 23;
	C99的VLA有一个限制，就是变长数组必须是自动存储类型的，就意味着一般用在函数内部声明，而且声明的时候不能被初始化
	据说，这样在后面的C语言中，sizeof这个——操作符——设计成了执行时候计算的模式了。
>16. int arr[5][12]  //5行，每行12个元素，唉~~~
	zippo[2][1]和*(*(zippo+2)+1)是等价的
	函数调用中，数组实际是传递的地址，为了保证原始的数组不被破坏，如果不修改数组内容的话，在函数的声明和定义时候，加上const关键字予以保护 int sum(const int ar[], int n);
>17.数组名和指针
	联系： 数组名可以看做是指向数组首地址的指针，但是这个“指针”是只读的；
	差异： sizeof( arr_name ) -> 数组占用空间大小； sizeof( ptr ) -> 4个字节
		当在函数传参的时候，如果需要传递数组的时候，参数名可以是int []或者int *这种类型，而且无论哪一种类型传递进去的参数，最终数组都会退化成完全的指针，比如sizeof返回成4（这就是需要传递数组尺寸最为额外参数的原因），而且这个指针不是“只读”的了，而是可以修改的
>18.const 相关
a.指向常量的指针
	double rates[5] = {0,};
	double const *pd = rages;
	const double *pd = rages; //指向常量的指针，又被成为常量指针，这里不能通过pd指针修改数组的值
	pd++; 			     //这是可以的，可以改变指向的对象
	所以亦可以用const修饰函数的形参，表示不会用这个指针修改原始数据集
	void show_array(const double *ar,int n);
b.常量或者非常量数据的地址可以赋值给指向常量指针，但是只有非常量数据的地址才可以赋值给普通指针，常量数据的地址是不能赋值给非常量指针的（这是合理的，否则就可以使用非常量的指针来修改常量的数据了）
所以在函数参数中，如果不改变参数指针指向的值的话，应该尽量用const，因为这样的参数类型可以接受const的和非const数据的地址
c.double * const pc = rates; //这样的指针只能指向rates，不能指向其他的地址，称为指针常量
d.const double * const ptr = rates;
e.const int **ptr; 	//这个ptr一级解析是可以修改的，就是*ptr可以修改，但是**ptr是不可修改的
>19.数组指针和指针数组
因为在表达式中，默认的[]的结合优先级比*高，所以对于下面第二个表达式，pax首先跟[2]集合，表示是一个数组，数组元素的类型是int *；而对于第一个式子，pz首先跟*结合，表现为一个指针，指向的数据类型是int [2]
int (* pz) [2];			//pz指向一个包含两个int值的数组
int * pax[2]; (int *)pax[2];	//pax是两个指针组成的数组
>20.函数传递多维数组的时候，是可以省略最高一维数组的，比如
int sum2(int arr[][4], int rows); //表明arr指向一个4个int组成的数组
int sum2(int (ptr*)[4], int rows);
另外，C99支持VLA，所以如果函数传参使用数组的话，就可以有下面的方式
int a = 3; int b = 4;
int arr[a][b];
int sum( int rows, int cols, int arr[rows][cols]);
>21.字符串指针和字符串数组
char str1[] = "I love china";
char* str2  = "I love china";
对于上面的初始化过程，字符串都是放在静态存储区的，第一个字符串数组，在程序执行之后，会分配存储空间，然后将这个字符串的实际内容复制到这个数组中去，这个数组名和别的数组名一样，不能使用str1++这种形式来修改；对于第二个使用指针的类型，直接str2指向原始静态存储区的字符串，而且这个指针跟一般的指针一样可以被操作。
字符串常量和静态存储区
#define str5 "I love china"
以及函数内部的字符串常量
  char* str;
  str = "I love china";
  const char* str2 = "I love china";
  对于这种方式，字符串是存储在静态存储区，上面的字符串都是一样的，他们在编译后，指针指向的是相同的存储"I love china"的地址，因此也不能根据这些指针修改原始的字符串任何字符内容，否则会产生段错误。所以如果可以，推荐使用const char* str = "XXXX"
>22.字符串数组
const char m1[40] = "aaaa";
const char m2[] = "aaaa";
const char *m3 = "aaaa";
const char *mym4[2] = {"aaa","bbb"};  		//字符串数组，保存的是2个地址
const char mym5[2][10] = {"aaa","bbb"};		//保存的是2个完整的字符串
char m5[] = "bbbb";
char *m6 = "bbbb";			//可以 m6++; m6=m5;
//一般来说是不允许m6[2]='S';这样修改字符串的，因为指针类型的软件可能优化成相同的字符串指向同一个实例，所以m6推荐定义为const char *m6
>23.字符串输入
char* gets(char* )，从标准输入设备读取字符串直到遇到一个换行。它读取换行符之前的所有字符，并在这些字符后面添加\0，并自动将读取的换行符丢弃！成功返回读入字符串的地址，实际函数传递进去的和返回的地址都是同一个地址，而如果错误或者到了文件结尾就返回NULL，所以函数中可以经常使用
while( gets(name) != NULL )
char *fgets(char *s, int size, FILE *stream);转为文件设计的，要求添加输入参数n，只能读取n-1个字符；读取到的换行符会放置到字符串中而不会被丢弃；如果键盘读取，需要参数stdin从标准输入读取
>24.字符串的输出
puts()，传递输出字符串的地址，输出完毕后会自动在输出的行尾添加一个换行
fputs()，文件版本，如果需要标准输出就提供stdout，这个函数不会在结尾自动添加一个换行
这里对上面两个进行总结就是：gets()丢掉输入里的换行符，但是puts()为输出添加换行符；fgets()存储输入中的换行符，而fputs()不会为输出添加换行符。这样gets()<->puts()和fgets()<->fputs()就刚好是成对的了。
	char line[81];
	while( gets(line) )
		puts(line);
	while ( fgets(line,81,stdin) )
		fputs(line, stdout);
>25.main(int argc, char* argv[])函数的参数argc数目，argv[0]就是程序名本身，argc的数目也是包含程序名的，所以argc至少是1！！
参数类型是字符串类型的，如果需要数字，可以atoi() atol() atof()等调用，这些函数包含在<stdlib.h>中。还有一些别的细致的函数
比如strtof() strtod() strtol() 之类的
>26.sizeof 返回size_t
对于数组名，返回的是整个数组所占用的byte个数;如果sizeof操作符计算的是指针，返回4（32位系统）
如果是函数，传递的形参是数组名，数组做为参数传递时就会退化为同类型的指针，sizeof得到的结果就是指针的尺寸了
这是数组和指针的一个区别，另外一个区别就是数组名是不可变的，有种指针常量的意思，而指针的值是可变的
>27.存储类型XXXXXXXXXX
|--------------------+------+--------+------+--------------------------------+----------------------------------------------------|
| 存储类型           | 时期 | 作用域 | 连接 | 声明方式                       | 说明                                               |
|--------------------+------+--------+------+--------------------------------+----------------------------------------------------|
| 自动               | 自动 | 代码块 | 空   | 代码块内部                     | 使用auto关键字                                     |
| 寄存器             | 自动 | 代码块 | 空   | 代码块内部，使用关键字register | 不能取这类变量的地址                               |
| 具有外部链接的静态 | 静态 | 文件   | 外部 | 所有函数之外                   |                                                    |
| 具有内部链接的静态 | 静态 | 文件   | 内部 | 所有函数之外，使用关键字static | 对于文件作用域，static表面了链接类型，而非存储类型 |
| 空连接的静态       | 静态 | 代码块 | 空   | 代码块内部，使用关键词static   |                                                    |
|--------------------+------+--------+------+--------------------------------+----------------------------------------------------|
规则：如果初始化一个具有静态存储时期（比如静态外部链接、静态内部链接和静态空链接）的变量，只能使用常量值来初始化；如果存储时期是自动的，列表中的值就不必是常量了。
>28.随机数
rand()，使用的时候需要注意使用 void srand(unsigned int seed);这个函数来初始化种子。
如果没有使用，默认就是使用srand(1)来初始化的。当然最好的，是使用srand((unsigned int )time( NULL ));
>29.全局变量的const
对于全局变量，可以在哥各个文件之间通信，如果不需要修改这个全局变量，可以实现的方法有：
(1)在一个.c文件中定义这个变量，比如const double PI = 3.14; 在另外一个.c文件中引用声明这个变量extern const double PI; 或者将这个extern写到.h文件中被包含
(2)直接在.h文件中定义声明，static const double PI = 3.14；然后被各个.c文件包含。这里世纪就是给每一个.c文件创建了一个内部链接的静态变量，但是由于是const类型的变量，大家即使都是自己的副本，但是值都是一样的，所以不会产生问题。
对于volatile，主要是防止被缓存，而得到的数据不是更新的数据。const和volatile是不矛盾的，volatile const int xxx; 只是不会被程序改变，但是可以被其它的代理修改更新
还有就是restrict关键字：主要是允许编译器优化代码增强计算，它的条件有：只能用于指针类型，而且指针是一个数据对象的唯一且初始的访问方式
int * restrict restar = (int *)malloc(10*sizeof(int));
>30.IO操作一般有两个级别：低级IO采用操作系统提供的吉恩IO服务；标准高级IO是使用了一个标准的C语言库和<stdio.h>头文件
低级IO操作进行的操作系统调用，位于底层，是不可以移植的，而且是非缓冲的，声明在<unistd.h>头文件中，通常使用的函数有（可以使用man 2 xxx来查看）：
int open(const char *pathname, int flags, mode_t mode);
ssize_t read(int fd, void *buf, size_t count);
ssize_t write(int fd, const void *buf, size_t count);
int close(int fd);
off_t lseek(int fd, off_t offset, int whence);
前面使用的IO都是C的标准高级IO操作，如getchar() gets() scanf();putchar() puts() printf();
高级IO提供的函数功能更多，而且对输入和输出提供了缓冲功能
FILE *fopen(const char *path, const char *mode);  失败返回NULL
mode: "r" "w"会先截断文件 "a" "r+"可以读取写入 "w+" "a+"
int getchar(void);
int getc(FILE *stream);
int putchar(int c);
int putc(int c, FILE *stream);
上面的函数都是对应的，只是一个用于标准输入输出，另外一个可以提供FILE对应于文件操作对于getc()和putc()还有对应的fgetc()和fputc()两个，它们的功能都是一样的，只是前者可能被实现成宏，可能对FILE *stream参数多次取值操作
读取到文件的结尾，会返回EOF，因为一开始就可能读取到结尾，所以循环应该使用入口循环
int ch; while( (ch = getchar()) != EOF ) { ... }
int fclose(FILE *fp); //刷新流的缓冲，然后关闭之。成功返回0，失败返回EOF
int fprintf(FILE *stream, const char *format, ...);
int fscanf(FILE *stream, const char *format, ...);
char *fgets(char *s, int size, FILE *stream);  //最多读取size-1个字符，然后自动添加'\0'到结尾。但是同gets()不同的是，fgets()会将读取的'\n'换行符保存起来，而gets()会将其丢弃
int fputs(const char *s, FILE *stream);  //类似的，fputs()打印的时候不会添加一个换行符
//上面让人的感觉就是fgets()和fputs()是为文件操作而设计的，因此不会随意添加丢弃东西，更加准确的操作数据
>31.文件位置
int fseek(FILE *stream, long offset, int whence);  //SEEK_SET, SEEK_CUR, SEEK_END
long ftell(FILE *stream);
void rewind(FILE *stream);  //等价与(void) fseek(stream, 0L, SEEK_SET);
int fgetpos(FILE *stream, fpos_t *pos);  //下面的这两个函数，可以突破上面的long的限制，可以处理大小达到2G的文件，成功返回0，错误返回EOF，并且设置errno
int fsetpos(FILE *stream, fpos_t *pos);
>32.其它IO操作函数
int ungetc(int c, FILE *stream);  //将c转换成unsigned char退回到输入缓冲去，以便下次读取。很常见的情况比如读取流到某一个字符，然后读出来检测到这个字符后，将这个字符放回去。可以进行多次ungetc，但是C实现只保证一次是成功的
int setvbuf(FILE *stream, char *buf, int mode, size_t size);
 _IONBF unbuffered        默认stderr是非缓冲的
 _IOLBF line buffered     关联terminal终端设备时候，默认是行缓冲的
 _IOFBF fully buffered    常常的文件操作都是块缓冲的。  
当是缓冲类型的流打开的时候，当进行第一次进行一个IO操作的时候，malloc被调用，并被自动设置成缓冲
上面的setvbuf函数，mode可以是上面的三个缓冲类型，这种改变缓冲类型的操作一般都是流被打开之后，没有进行任何其它操作之前进行的
另外在标准输入函数进行读取的时候，在文件结尾和发生错误的时候，都会返回EOF，那么使用函数int feof(FILE *stream); int ferror(FILE *stream);来检测流的状态，如果是相应的原因，函数就返回非0值；
void clearerr(FILE *stream);这个函数可以清除eof或者error标志
>33.二进制的文件操作
#include <stdio.h>
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);
前面的IO操作，实际都是将数据用字符串的形式来保存和读取的，这样不是原始的数据，字符串保存起来肯能会有精度损失什么的，这里还有原始数据的直接保存方法
例子：
int main (int argc, char* argv[])
{
	int i_num = 23; int ri_num;
	double f_num = 23.345; double rf_num;

	FILE* fa;
	fa = fopen("test.db","w+");
	fwrite(&i_num,sizeof(int),1,fa);
	fwrite(&f_num,sizeof(double),1,fa);
	
	// Here, we want to read the info
	rewind(fa);
	fread(&ri_num,sizeof(int),1,fa);
	fread(&rf_num,sizeof(double),1,fa);
	printf("Data: ri_num->%d, rf_num->%f \n",ri_num,rf_num);

	fclose(fa);
	return 0;
}
>34.数组C99的指定初始化项目
        struct stu {
                char * name;
                int age;
        };
        struct stu nicol = {
                .name="Nicol",
                .age=23
        };
上面的例子中，还是需要重点注意char* 以及char[100]的区别，对于字符指针，没有初始化的野指针是非常危险的。
现在的结构的用法很灵活，可以被赋值（即使结构内部有数组，可以自动复制），作为参数传递，作为函数结果返回。
但是用整体结构作为参数传递或者返回，往往会涉及到数据的复制，在时间和空间上面是不合算的；使用指针传递，但是需要注意使用const关键字进行数据的必要保护；
>35.union联合
系统分配的空间是可以容纳最大数据类型的空间
初始化的方式：(1)使用相同类型的联合赋值；(2)var.letter='R'；(3)union hold B={'R'}；(4)union hold C = {.letter='R'}这个是C99标准的新方式
>36.enum枚举
enum spectrum {red, orange, yellow, green, blue, violet};  //默认的枚举标记名，从0开始
enum spectrum color;
前面一个是枚举标记名，后者是变量，此后就color=red 这样赋值使用了
>37.typedef 类型定义
这个比#define起来，虽然不能定义常量，但是typedef是使用编译器执行的，而不像#define使用预编译器执行的；typedef可以有作用范围，比如函数内部使用的typedef，那么就只在这个函数内部才产生作用。还有就是可能宏的直接替换所带来的潜在的问题，比如：
typedef STRING char *;
#define STRING char *
对于STRING str1, str2; #define的版本就会出现问题
typedef struct {double x; double y;} rect;
rect r1 = { 2.0, 3.0 }; rect r2;
>38.让你死的东西。。。
int board[8][8];   // int 数组的数组
int ** ptr;        // 指向int指针的指针
int * risks[10];   // 一个10个元素的数组，数组的元素是int *
int (* rusks)[10]; // 一个指针，指向的是10个int元素的数组
int * oof[3][4];   // 3 x 4 的数组，数组的元素是int *
int (* uuf)[3][4]; // 一个指针，指向的是 3 x 4 的int数组
int (* uof[3])[4]; // 一个uof[3]的数组，数组的内容是指向int [4]的指针
>39.函数指针
void (* pf) (char* name); 可以是void toUp(char* name); 这类函数的指针
pf = toUp; //这样赋值
调用时候 pf("haha")和(* pf)("haha")都是合法的
void show(void (* fp)(char *), char * str); //函数指针作为参数
typedef void (* V_FP_CHARP) (char *);
void show(V_FP_CHARP fp, char *);
>40.位字段
一般都是在一个unsigned int中，对各个比特位进行分割的。如果超过了32位，再继续使用下一个接着的unsigned int。我们在位字段的定义中，还可以使用:0来强制对其到下一个unsigned int
  8     struct _stu {
  9         unsigned int aa:1;
 10         signed   int bb:3;
 11         bool         cc:1;
 12         unsigned int   :0;
 13         bool         dd:1;
 14     } stu;
 sizeof(stu) == 8 == unsigned int * 2
>41.C语言预处理
宏
带参数的宏 #define SQUARE(X) X*X
	当然为了解决各种诡异的问题，还是建议 #define SQUARE(X) ((X)*(X))
利用宏创建字符串#运算符以及粘合剂##运算符
	#define XNAME(X) x##X
	#define PRINT_XN(n) printf("x"#n"->%d\n",x##n)
	那么调用的时候，就可以PRINT_XN(1) PRINT_XN(2) 来打印x1 x2了
可变宏...和__VA_ARGS__ (实际就是用__VA_ARGS__引用...)
	#define PRT(X,...) printf("MSG:" #X " " __VA_ARGS__)
	PRT( My name is ,"Nicol TAO");  //这种调用，太诡异了。。。
	结果:MSG:My name is Nicol TAO
>42.其他预处理指令
#ifndef #ifdef #else #endif #define #undef #elif
#if #elif #endif 这里采用C语言的关系运算符和逻辑运算符
#if SYS == 1
	xxx
#endif
	#if defined(IBM)
	#elif defined(VAX)
	#enif
C语言预定义宏变量
__DATE__  进行预处理的日期
__FILE__  当前源代码文件名的字符串文字
__LINE__  当前源代码文本中的行号的整数常量
__TIME__  源文件编译时间
__func__  当前函数名字符串
>43.可变参数
#include <stdarg.h>
int sum(int x, int y, int count, ...){
        va_list ap;
        int i = 0;
        int res = x + y;

        va_start(ap, count); //y, the last define arguments
        while ( count -- ){
                res += va_arg(ap, int);
        }
        va_end(ap);
        return res;
}
注意：标准C库的中的三个宏的作用只是用来确定可变参数列表中每个参数的内存地址，编译器是不知道参数的实际数目的。
所以，在实际应用的代码中，程序员必须自己考虑确定参数数目的办法，如：⑴在固定参数中设标志， printf函数就是用这个办法；⑵在预先设定一个特殊的结束标记，就是说多输入一个可变参数，调用时要将最后一个可变参数的值设置成这个特殊的值，在函数体中根据这个值判断是否达到参数的结尾；(3)直接传递进去一个参数，标志着参数的个数
>44.内联函数
内联函数和普通函数不同，普通的函数都是在源代码中编译产生函数代码和地址，然后链接的时候填入函数的地址；但是内联函数就是将函数代码直接插入然后编译的，所以在编译源代码的时候需要知道内联函数的实现代码，然后直接编译到调用函数中去。可以在源文件中直接定义inline函数，这样只能给这个文件自身使用；inline函数建议将函数的定义放在头文件中，任何需要这个内联的时候包含头文件就可以了，这样在预处理的时候就会展开内联成功。（一般来说函数的定义是不能放置到头文件中去的，因为这样会导致函数的重复定义，但是内联函数是个例外）
>45.常见的数据结构
数组、链表、循环链表、双向链表、散列表
